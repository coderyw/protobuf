// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: issue498.proto

package issue449

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/coderyw/protobuf/gogoproto"
	proto "github.com/coderyw/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Message struct {
	Uint8                *uint8   `protobuf:"varint,1,req,name=uint8,casttype=uint8" json:"uint8,omitempty"`
	Uint16               *uint16  `protobuf:"varint,2,req,name=uint16,casttype=uint16" json:"uint16,omitempty"`
	Int8                 *int8    `protobuf:"varint,3,req,name=int8,casttype=int8" json:"int8,omitempty"`
	Int16                *int16   `protobuf:"varint,4,req,name=int16,casttype=int16" json:"int16,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe85d52248c43d9d, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetUint8() uint8 {
	if m != nil && m.Uint8 != nil {
		return *m.Uint8
	}
	return 0
}

func (m *Message) GetUint16() uint16 {
	if m != nil && m.Uint16 != nil {
		return *m.Uint16
	}
	return 0
}

func (m *Message) GetInt8() int8 {
	if m != nil && m.Int8 != nil {
		return *m.Int8
	}
	return 0
}

func (m *Message) GetInt16() int16 {
	if m != nil && m.Int16 != nil {
		return *m.Int16
	}
	return 0
}

func (m *Message) SetUint8_(val uint8) {
	if m != nil {
		*m.Uint8 = val
	}

}

func (m *Message) SetUint16_(val uint16) {
	if m != nil {
		*m.Uint16 = val
	}

}

func (m *Message) SetInt8_(val int8) {
	if m != nil {
		*m.Int8 = val
	}

}

func (m *Message) SetInt16_(val int16) {
	if m != nil {
		*m.Int16 = val
	}

}

func (m *Message) IsNil() bool {
	return m == nil

}

func init() {
	proto.RegisterType((*Message)(nil), "issue449.Message")
}

func init() { proto.RegisterFile("issue498.proto", fileDescriptor_fe85d52248c43d9d) }

var fileDescriptor_fe85d52248c43d9d = []byte{
	// 183 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0x2c, 0x2e, 0x2e,
	0x4d, 0x35, 0xb1, 0xb4, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf0, 0x4d, 0x2c,
	0xa5, 0x0c, 0xd2, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0x93, 0xf3, 0x53,
	0x52, 0x8b, 0x2a, 0xcb, 0xf5, 0xc1, 0x6a, 0x92, 0x4a, 0xd3, 0xf4, 0xd3, 0xf3, 0xd3, 0xf3, 0xc1,
	0x1c, 0x30, 0x0b, 0xa2, 0x57, 0xa9, 0x97, 0x91, 0x8b, 0xdd, 0x37, 0xb5, 0xb8, 0x38, 0x31, 0x3d,
	0x55, 0x48, 0x9e, 0x8b, 0xb5, 0x34, 0x33, 0xaf, 0xc4, 0x42, 0x82, 0x51, 0x81, 0x49, 0x83, 0xd7,
	0x89, 0xf3, 0xd7, 0x3d, 0x79, 0x88, 0x40, 0x10, 0x84, 0x12, 0x52, 0xe2, 0x62, 0x03, 0x31, 0x0c,
	0xcd, 0x24, 0x98, 0xc0, 0x2a, 0xb8, 0x7e, 0xdd, 0x93, 0x87, 0x8a, 0x04, 0x41, 0x69, 0x21, 0x19,
	0x2e, 0x16, 0xb0, 0x19, 0xcc, 0x60, 0x15, 0x1c, 0xbf, 0xee, 0xc9, 0x83, 0xf9, 0x41, 0x60, 0x12,
	0x64, 0x05, 0xc4, 0x00, 0x16, 0x84, 0x15, 0x10, 0xfd, 0x10, 0xca, 0x89, 0xe7, 0xc7, 0x43, 0x39,
	0xc6, 0x15, 0x8f, 0xe4, 0x18, 0x77, 0x3c, 0x92, 0x63, 0x04, 0x04, 0x00, 0x00, 0xff, 0xff, 0x4b,
	0x10, 0x7c, 0xa6, 0xea, 0x00, 0x00, 0x00,
}

func (this *Message) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message)
	if !ok {
		that2, ok := that.(Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uint8 != nil && that1.Uint8 != nil {
		if *this.Uint8 != *that1.Uint8 {
			return false
		}
	} else if this.Uint8 != nil {
		return false
	} else if that1.Uint8 != nil {
		return false
	}
	if this.Uint16 != nil && that1.Uint16 != nil {
		if *this.Uint16 != *that1.Uint16 {
			return false
		}
	} else if this.Uint16 != nil {
		return false
	} else if that1.Uint16 != nil {
		return false
	}
	if this.Int8 != nil && that1.Int8 != nil {
		if *this.Int8 != *that1.Int8 {
			return false
		}
	} else if this.Int8 != nil {
		return false
	} else if that1.Int8 != nil {
		return false
	}
	if this.Int16 != nil && that1.Int16 != nil {
		if *this.Int16 != *that1.Int16 {
			return false
		}
	} else if this.Int16 != nil {
		return false
	} else if that1.Int16 != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func NewPopulatedMessage(r randyIssue498, easy bool) *Message {
	this := &Message{}
	v1 := uint8(r.Uint32())
	this.Uint8 = &v1
	v2 := uint16(r.Uint32())
	this.Uint16 = &v2
	v3 := int8(r.Uint32())
	this.Int8 = &v3
	v4 := int16(r.Uint32())
	this.Int16 = &v4
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedIssue498(r, 5)
	}
	return this
}

type randyIssue498 interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneIssue498(r randyIssue498) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringIssue498(r randyIssue498) string {
	v5 := r.Intn(100)
	tmps := make([]rune, v5)
	for i := 0; i < v5; i++ {
		tmps[i] = randUTF8RuneIssue498(r)
	}
	return string(tmps)
}
func randUnrecognizedIssue498(r randyIssue498, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldIssue498(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldIssue498(dAtA []byte, r randyIssue498, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateIssue498(dAtA, uint64(key))
		v6 := r.Int63()
		if r.Intn(2) == 0 {
			v6 *= -1
		}
		dAtA = encodeVarintPopulateIssue498(dAtA, uint64(v6))
	case 1:
		dAtA = encodeVarintPopulateIssue498(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateIssue498(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateIssue498(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateIssue498(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateIssue498(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
